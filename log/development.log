Started GET "/api/v1/users?username=ggore" for 127.0.0.1 at 2018-02-20 20:06:54 -0500
  [1m[35m (3.3ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by Api::V1::UsersController#index as */*
  Parameters: {"username"=>"ggore"}
  [1m[36mUser Load (3.7ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModelSerializers::Adapter::Attributes (0.41ms)
Completed 200 OK in 40ms (Views: 9.1ms | ActiveRecord: 13.4ms)


Started POST "/api/v1/users" for 127.0.0.1 at 2018-02-20 20:06:55 -0500
Processing by Api::V1::UsersController#create as JSON
  Parameters: {"username"=>"ggore", "user"=>{"username"=>"ggore"}}
  [1m[35m (1.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mUser Exists (1.5ms)[0m  [1m[34mSELECT  1 AS one FROM "users" WHERE "users"."username" = $1 LIMIT $2[0m  [["username", "ggore"], ["LIMIT", 1]]
  [1m[35mSQL (9.3ms)[0m  [1m[32mINSERT INTO "users" ("username", "created_at", "updated_at") VALUES ($1, $2, $3) RETURNING "id"[0m  [["username", "ggore"], ["created_at", "2018-02-21 01:06:55.135613"], ["updated_at", "2018-02-21 01:06:55.135613"]]
  [1m[35m (1.2ms)[0m  [1m[35mCOMMIT[0m
[active_model_serializers]   [1m[36mTopic Load (1.6ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 15]]
[active_model_serializers]   [1m[36mArticle Load (2.7ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 15]]
[active_model_serializers] Rendered UserSerializer with ActiveModelSerializers::Adapter::Attributes (55.67ms)
Completed 200 OK in 92ms (Views: 59.5ms | ActiveRecord: 24.6ms)


Started GET "/api/v1/users" for 127.0.0.1 at 2018-02-20 20:07:08 -0500
Processing by Api::V1::UsersController#index as HTML
  [1m[36mUser Load (0.6ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
[active_model_serializers]   [1m[36mTopic Load (0.6ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 1]]
[active_model_serializers]   [1m[36mArticle Load (0.7ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 1]]
[active_model_serializers]   [1m[36mTopic Load (0.8ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 2]]
[active_model_serializers]   [1m[36mArticle Load (0.7ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 2]]
[active_model_serializers]   [1m[36mTopic Load (0.4ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 3]]
[active_model_serializers] No serializer found for resource: #<Topic id: 18, user_id: 3, title: "shrimp", created_at: "2018-01-05 15:54:57", updated_at: "2018-01-05 15:54:57">
[active_model_serializers]   [1m[36mArticle Load (1.5ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 3]]
[active_model_serializers] No serializer found for resource: #<Article id: 57, topic_id: 18, url: "https://stackoverflow.com/questions/32577911/how-t...", description: "product table:\n\nshrimp\nlobster\nbeef\nspecial1\nspeci...", created_at: "2018-01-05 15:54:59", updated_at: "2018-01-05 15:54:59", title: "how to count a row multiple times in case">
[active_model_serializers]   [1m[36mTopic Load (0.5ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 4]]
[active_model_serializers]   [1m[36mArticle Load (0.5ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 4]]
[active_model_serializers]   [1m[36mTopic Load (0.3ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 5]]
[active_model_serializers] No serializer found for resource: #<Topic id: 11, user_id: 5, title: "pedagogy ", created_at: "2018-01-05 14:53:40", updated_at: "2018-01-05 14:53:40">
[active_model_serializers]   [1m[36mArticle Load (0.8ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 5]]
[active_model_serializers] No serializer found for resource: #<Article id: 38, topic_id: 11, url: "https://stackoverflow.com/questions/19548404/defin...", description: "I would like to hide some complexity from some non...", created_at: "2018-01-05 14:55:52", updated_at: "2018-01-05 14:55:52", title: "#define for pedagogical purposes">
[active_model_serializers]   [1m[36mTopic Load (0.4ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 6]]
[active_model_serializers] No serializer found for resource: #<Topic id: 13, user_id: 6, title: "rochel", created_at: "2018-01-05 14:54:52", updated_at: "2018-01-05 14:54:52">
[active_model_serializers]   [1m[36mArticle Load (0.3ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 6]]
[active_model_serializers] No serializer found for resource: #<Article id: 35, topic_id: 13, url: "https://en.wikipedia.org/wiki/Rochelle_Rao", description: "Rochelle Rao (born 25 November 1988) is an Indian ...", created_at: "2018-01-05 14:54:56", updated_at: "2018-01-05 14:54:56", title: "Rochelle Rao">
[active_model_serializers]   [1m[36mTopic Load (0.4ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 7]]
[active_model_serializers] No serializer found for resource: #<Topic id: 16, user_id: 7, title: "pedagogy", created_at: "2018-01-05 14:59:27", updated_at: "2018-01-05 14:59:27">
[active_model_serializers]   [1m[36mArticle Load (0.4ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 7]]
[active_model_serializers] No serializer found for resource: #<Article id: 51, topic_id: 16, url: "https://en.wikipedia.org/wiki/Pedagogy_of_Hope:_Re...", description: "Pedagogy of Hope: Reliving Pedagogy of the Oppress...", created_at: "2018-01-05 14:59:30", updated_at: "2018-01-05 14:59:30", title: "Pedagogy of Hope: Reliving Pedagogy of the Oppress...">
[active_model_serializers]   [1m[36mTopic Load (0.3ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 8]]
[active_model_serializers]   [1m[36mArticle Load (0.2ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 8]]
[active_model_serializers]   [1m[36mTopic Load (0.2ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 9]]
[active_model_serializers]   [1m[36mArticle Load (0.2ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 9]]
[active_model_serializers]   [1m[36mTopic Load (0.3ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 10]]
[active_model_serializers] No serializer found for resource: #<Topic id: 19, user_id: 10, title: "personal computer", created_at: "2018-01-05 18:23:22", updated_at: "2018-01-05 18:23:22">
[active_model_serializers]   [1m[36mArticle Load (0.3ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 10]]
[active_model_serializers] No serializer found for resource: #<Article id: 58, topic_id: 19, url: "https://www.webopedia.com/TERM/P/personal_computer...", description: "A personal computer is a relatively inexpensive co...", created_at: "2018-01-05 18:23:22", updated_at: "2018-01-05 18:23:22", title: "What is a PC - Personal Computer? Webopedia Defini...">
[active_model_serializers]   [1m[36mTopic Load (0.2ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 11]]
[active_model_serializers] No serializer found for resource: #<Topic id: 22, user_id: 11, title: "what is literature?", created_at: "2018-01-05 18:30:15", updated_at: "2018-01-05 18:30:15">
[active_model_serializers]   [1m[36mArticle Load (0.4ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 11]]
[active_model_serializers] No serializer found for resource: #<Article id: 63, topic_id: 22, url: "https://en.wikipedia.org/wiki/What_Is_Literature%3...", description: "What Is Literature? (French: Qu'est-ce que la litt...", created_at: "2018-01-05 18:30:18", updated_at: "2018-01-05 18:30:18", title: "What Is Literature?">
[active_model_serializers]   [1m[36mTopic Load (0.3ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 12]]
[active_model_serializers]   [1m[36mArticle Load (0.2ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 12]]
[active_model_serializers]   [1m[36mTopic Load (0.2ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 13]]
[active_model_serializers]   [1m[36mArticle Load (0.3ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 13]]
[active_model_serializers]   [1m[36mTopic Load (0.3ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 14]]
[active_model_serializers] No serializer found for resource: #<Topic id: 28, user_id: 14, title: "when is christmas?", created_at: "2018-01-05 20:52:00", updated_at: "2018-01-05 20:52:00">
[active_model_serializers]   [1m[36mArticle Load (0.4ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 14]]
[active_model_serializers] No serializer found for resource: #<Article id: 75, topic_id: 28, url: "https://www.timeanddate.com/holidays/common/christ...", description: "Celebrate Christmas Day. Christmas Day is a holida...", created_at: "2018-01-05 20:52:09", updated_at: "2018-01-05 20:52:09", title: "Christmas Day">
[active_model_serializers]   [1m[36mTopic Load (0.2ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 15]]
[active_model_serializers]   [1m[36mArticle Load (0.3ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 15]]
[active_model_serializers] No serializer found for resource: #<Topic id: 18, user_id: 3, title: "shrimp", created_at: "2018-01-05 15:54:57", updated_at: "2018-01-05 15:54:57">
[active_model_serializers] No serializer found for resource: #<Article id: 57, topic_id: 18, url: "https://stackoverflow.com/questions/32577911/how-t...", description: "product table:\n\nshrimp\nlobster\nbeef\nspecial1\nspeci...", created_at: "2018-01-05 15:54:59", updated_at: "2018-01-05 15:54:59", title: "how to count a row multiple times in case">
[active_model_serializers] No serializer found for resource: #<Topic id: 11, user_id: 5, title: "pedagogy ", created_at: "2018-01-05 14:53:40", updated_at: "2018-01-05 14:53:40">
[active_model_serializers] No serializer found for resource: #<Article id: 38, topic_id: 11, url: "https://stackoverflow.com/questions/19548404/defin...", description: "I would like to hide some complexity from some non...", created_at: "2018-01-05 14:55:52", updated_at: "2018-01-05 14:55:52", title: "#define for pedagogical purposes">
[active_model_serializers] No serializer found for resource: #<Topic id: 13, user_id: 6, title: "rochel", created_at: "2018-01-05 14:54:52", updated_at: "2018-01-05 14:54:52">
[active_model_serializers] No serializer found for resource: #<Article id: 35, topic_id: 13, url: "https://en.wikipedia.org/wiki/Rochelle_Rao", description: "Rochelle Rao (born 25 November 1988) is an Indian ...", created_at: "2018-01-05 14:54:56", updated_at: "2018-01-05 14:54:56", title: "Rochelle Rao">
[active_model_serializers] No serializer found for resource: #<Topic id: 16, user_id: 7, title: "pedagogy", created_at: "2018-01-05 14:59:27", updated_at: "2018-01-05 14:59:27">
[active_model_serializers] No serializer found for resource: #<Article id: 51, topic_id: 16, url: "https://en.wikipedia.org/wiki/Pedagogy_of_Hope:_Re...", description: "Pedagogy of Hope: Reliving Pedagogy of the Oppress...", created_at: "2018-01-05 14:59:30", updated_at: "2018-01-05 14:59:30", title: "Pedagogy of Hope: Reliving Pedagogy of the Oppress...">
[active_model_serializers] No serializer found for resource: #<Topic id: 19, user_id: 10, title: "personal computer", created_at: "2018-01-05 18:23:22", updated_at: "2018-01-05 18:23:22">
[active_model_serializers] No serializer found for resource: #<Article id: 58, topic_id: 19, url: "https://www.webopedia.com/TERM/P/personal_computer...", description: "A personal computer is a relatively inexpensive co...", created_at: "2018-01-05 18:23:22", updated_at: "2018-01-05 18:23:22", title: "What is a PC - Personal Computer? Webopedia Defini...">
[active_model_serializers] No serializer found for resource: #<Topic id: 22, user_id: 11, title: "what is literature?", created_at: "2018-01-05 18:30:15", updated_at: "2018-01-05 18:30:15">
[active_model_serializers] No serializer found for resource: #<Article id: 63, topic_id: 22, url: "https://en.wikipedia.org/wiki/What_Is_Literature%3...", description: "What Is Literature? (French: Qu'est-ce que la litt...", created_at: "2018-01-05 18:30:18", updated_at: "2018-01-05 18:30:18", title: "What Is Literature?">
[active_model_serializers] No serializer found for resource: #<Topic id: 28, user_id: 14, title: "when is christmas?", created_at: "2018-01-05 20:52:00", updated_at: "2018-01-05 20:52:00">
[active_model_serializers] No serializer found for resource: #<Article id: 75, topic_id: 28, url: "https://www.timeanddate.com/holidays/common/christ...", description: "Celebrate Christmas Day. Christmas Day is a holida...", created_at: "2018-01-05 20:52:09", updated_at: "2018-01-05 20:52:09", title: "Christmas Day">
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModelSerializers::Adapter::Attributes (145.07ms)
Completed 200 OK in 151ms (Views: 134.4ms | ActiveRecord: 15.7ms)


Started GET "/favicon.ico" for 127.0.0.1 at 2018-02-20 20:07:09 -0500
  
ActionController::RoutingError (No route matches [GET] "/favicon.ico"):
  
actionpack (5.1.4) lib/action_dispatch/middleware/debug_exceptions.rb:63:in `call'
actionpack (5.1.4) lib/action_dispatch/middleware/show_exceptions.rb:31:in `call'
railties (5.1.4) lib/rails/rack/logger.rb:36:in `call_app'
railties (5.1.4) lib/rails/rack/logger.rb:24:in `block in call'
activesupport (5.1.4) lib/active_support/tagged_logging.rb:69:in `block in tagged'
activesupport (5.1.4) lib/active_support/tagged_logging.rb:26:in `tagged'
activesupport (5.1.4) lib/active_support/tagged_logging.rb:69:in `tagged'
railties (5.1.4) lib/rails/rack/logger.rb:24:in `call'
actionpack (5.1.4) lib/action_dispatch/middleware/remote_ip.rb:79:in `call'
actionpack (5.1.4) lib/action_dispatch/middleware/request_id.rb:25:in `call'
rack (2.0.3) lib/rack/runtime.rb:22:in `call'
activesupport (5.1.4) lib/active_support/cache/strategy/local_cache_middleware.rb:27:in `call'
actionpack (5.1.4) lib/action_dispatch/middleware/executor.rb:12:in `call'
actionpack (5.1.4) lib/action_dispatch/middleware/static.rb:125:in `call'
rack (2.0.3) lib/rack/sendfile.rb:111:in `call'
rack-cors (1.0.2) lib/rack/cors.rb:97:in `call'
railties (5.1.4) lib/rails/engine.rb:522:in `call'
puma (3.11.0) lib/puma/configuration.rb:225:in `call'
puma (3.11.0) lib/puma/server.rb:624:in `handle_request'
puma (3.11.0) lib/puma/server.rb:438:in `process_client'
puma (3.11.0) lib/puma/server.rb:302:in `block in run'
puma (3.11.0) lib/puma/thread_pool.rb:120:in `block in spawn_thread'
Started GET "/api/v1/users/1" for 127.0.0.1 at 2018-02-20 20:07:27 -0500
  
AbstractController::ActionNotFound (The action 'show' could not be found for Api::V1::UsersController):
  
actionpack (5.1.4) lib/abstract_controller/base.rb:119:in `process'
actionpack (5.1.4) lib/action_controller/metal.rb:189:in `dispatch'
actionpack (5.1.4) lib/action_controller/metal.rb:253:in `dispatch'
actionpack (5.1.4) lib/action_dispatch/routing/route_set.rb:49:in `dispatch'
actionpack (5.1.4) lib/action_dispatch/routing/route_set.rb:31:in `serve'
actionpack (5.1.4) lib/action_dispatch/journey/router.rb:50:in `block in serve'
actionpack (5.1.4) lib/action_dispatch/journey/router.rb:33:in `each'
actionpack (5.1.4) lib/action_dispatch/journey/router.rb:33:in `serve'
actionpack (5.1.4) lib/action_dispatch/routing/route_set.rb:834:in `call'
rack (2.0.3) lib/rack/etag.rb:25:in `call'
rack (2.0.3) lib/rack/conditional_get.rb:25:in `call'
rack (2.0.3) lib/rack/head.rb:12:in `call'
activerecord (5.1.4) lib/active_record/migration.rb:556:in `call'
actionpack (5.1.4) lib/action_dispatch/middleware/callbacks.rb:26:in `block in call'
activesupport (5.1.4) lib/active_support/callbacks.rb:97:in `run_callbacks'
actionpack (5.1.4) lib/action_dispatch/middleware/callbacks.rb:24:in `call'
actionpack (5.1.4) lib/action_dispatch/middleware/executor.rb:12:in `call'
actionpack (5.1.4) lib/action_dispatch/middleware/debug_exceptions.rb:59:in `call'
actionpack (5.1.4) lib/action_dispatch/middleware/show_exceptions.rb:31:in `call'
railties (5.1.4) lib/rails/rack/logger.rb:36:in `call_app'
railties (5.1.4) lib/rails/rack/logger.rb:24:in `block in call'
activesupport (5.1.4) lib/active_support/tagged_logging.rb:69:in `block in tagged'
activesupport (5.1.4) lib/active_support/tagged_logging.rb:26:in `tagged'
activesupport (5.1.4) lib/active_support/tagged_logging.rb:69:in `tagged'
railties (5.1.4) lib/rails/rack/logger.rb:24:in `call'
actionpack (5.1.4) lib/action_dispatch/middleware/remote_ip.rb:79:in `call'
actionpack (5.1.4) lib/action_dispatch/middleware/request_id.rb:25:in `call'
rack (2.0.3) lib/rack/runtime.rb:22:in `call'
activesupport (5.1.4) lib/active_support/cache/strategy/local_cache_middleware.rb:27:in `call'
actionpack (5.1.4) lib/action_dispatch/middleware/executor.rb:12:in `call'
actionpack (5.1.4) lib/action_dispatch/middleware/static.rb:125:in `call'
rack (2.0.3) lib/rack/sendfile.rb:111:in `call'
rack-cors (1.0.2) lib/rack/cors.rb:97:in `call'
railties (5.1.4) lib/rails/engine.rb:522:in `call'
puma (3.11.0) lib/puma/configuration.rb:225:in `call'
puma (3.11.0) lib/puma/server.rb:624:in `handle_request'
puma (3.11.0) lib/puma/server.rb:438:in `process_client'
puma (3.11.0) lib/puma/server.rb:302:in `block in run'
puma (3.11.0) lib/puma/thread_pool.rb:120:in `block in spawn_thread'
Started GET "/api/v1/topics?title=gems" for 127.0.0.1 at 2018-02-20 20:08:26 -0500
Processing by Api::V1::TopicsController#index as */*
  Parameters: {"title"=>"gems"}
  [1m[36mTopic Load (0.3ms)[0m  [1m[34mSELECT "topics".* FROM "topics"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModelSerializers::Adapter::Attributes (0.08ms)
Completed 200 OK in 2ms (Views: 0.6ms | ActiveRecord: 0.3ms)


Started POST "/api/v1/topics" for 127.0.0.1 at 2018-02-20 20:08:26 -0500
Processing by Api::V1::TopicsController#create as JSON
  Parameters: {"user_id"=>15, "title"=>"gems", "topic"=>{"user_id"=>15, "title"=>"gems"}}
  [1m[35m (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 15], ["LIMIT", 1]]
  [1m[36mTopic Exists (0.5ms)[0m  [1m[34mSELECT  1 AS one FROM "topics" WHERE "topics"."title" = $1 LIMIT $2[0m  [["title", "gems"], ["LIMIT", 1]]
  [1m[35mSQL (8.8ms)[0m  [1m[32mINSERT INTO "topics" ("user_id", "title", "created_at", "updated_at") VALUES ($1, $2, $3, $4) RETURNING "id"[0m  [["user_id", 15], ["title", "gems"], ["created_at", "2018-02-21 01:08:26.283633"], ["updated_at", "2018-02-21 01:08:26.283633"]]
  [1m[35m (0.4ms)[0m  [1m[35mCOMMIT[0m
[active_model_serializers] Rendered ActiveModel::Serializer::Null with Topic (0.32ms)
Completed 200 OK in 23ms (Views: 5.9ms | ActiveRecord: 10.0ms)


Started POST "/api/v1/articles" for 127.0.0.1 at 2018-02-20 20:08:26 -0500
Processing by Api::V1::ArticlesController#create as JSON
  Parameters: {"topic_id"=>29, "title"=>"How to install a specific version of a ruby gem?", "url"=>"https://stackoverflow.com/questions/17026441/how-to-install-a-specific-version-of-a-ruby-gem", "description"=>"Using the command-line gem tool, how can I install a specific version of a gem?\n", "article"=>{"topic_id"=>29, "url"=>"https://stackoverflow.com/questions/17026441/how-to-install-a-specific-version-of-a-ruby-gem", "description"=>"Using the command-line gem tool, how can I install a specific version of a gem?\n", "title"=>"How to install a specific version of a ruby gem?"}}
  [1m[35m (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[36mTopic Load (0.3ms)[0m  [1m[34mSELECT  "topics".* FROM "topics" WHERE "topics"."id" = $1 LIMIT $2[0m  [["id", 29], ["LIMIT", 1]]
  [1m[35mSQL (4.0ms)[0m  [1m[32mINSERT INTO "articles" ("topic_id", "url", "description", "created_at", "updated_at", "title") VALUES ($1, $2, $3, $4, $5, $6) RETURNING "id"[0m  [["topic_id", 29], ["url", "https://stackoverflow.com/questions/17026441/how-to-install-a-specific-version-of-a-ruby-gem"], ["description", "Using the command-line gem tool, how can I install a specific version of a gem?\n"], ["created_at", "2018-02-21 01:08:26.322082"], ["updated_at", "2018-02-21 01:08:26.322082"], ["title", "How to install a specific version of a ruby gem?"]]
  [1m[35m (0.4ms)[0m  [1m[35mCOMMIT[0m
[active_model_serializers] Rendered ActiveModel::Serializer::Null with Article (0.27ms)
Completed 200 OK in 20ms (Views: 8.5ms | ActiveRecord: 4.9ms)


Started GET "/api/v1/topics?title=react%20state" for 127.0.0.1 at 2018-02-20 20:08:50 -0500
Processing by Api::V1::TopicsController#index as */*
  Parameters: {"title"=>"react state"}
  [1m[36mTopic Load (0.4ms)[0m  [1m[34mSELECT "topics".* FROM "topics"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModelSerializers::Adapter::Attributes (0.09ms)
Completed 200 OK in 3ms (Views: 0.6ms | ActiveRecord: 0.4ms)


Started POST "/api/v1/topics" for 127.0.0.1 at 2018-02-20 20:08:50 -0500
Processing by Api::V1::TopicsController#create as JSON
  Parameters: {"user_id"=>15, "title"=>"react state", "topic"=>{"user_id"=>15, "title"=>"react state"}}
  [1m[35m (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 15], ["LIMIT", 1]]
  [1m[36mTopic Exists (0.4ms)[0m  [1m[34mSELECT  1 AS one FROM "topics" WHERE "topics"."title" = $1 LIMIT $2[0m  [["title", "react state"], ["LIMIT", 1]]
  [1m[35mSQL (0.8ms)[0m  [1m[32mINSERT INTO "topics" ("user_id", "title", "created_at", "updated_at") VALUES ($1, $2, $3, $4) RETURNING "id"[0m  [["user_id", 15], ["title", "react state"], ["created_at", "2018-02-21 01:08:50.976645"], ["updated_at", "2018-02-21 01:08:50.976645"]]
  [1m[35m (1.0ms)[0m  [1m[35mCOMMIT[0m
[active_model_serializers] Rendered ActiveModel::Serializer::Null with Topic (0.26ms)
Completed 200 OK in 8ms (Views: 0.8ms | ActiveRecord: 2.8ms)


Started POST "/api/v1/articles" for 127.0.0.1 at 2018-02-20 20:08:50 -0500
Processing by Api::V1::ArticlesController#create as JSON
  Parameters: {"topic_id"=>30, "title"=>"What is the difference between state and props in React?", "url"=>"https://stackoverflow.com/questions/27991366/what-is-the-difference-between-state-and-props-in-react", "description"=>"I was watching a Pluralsight course on React and the instructor stated that props should not be changed. I'm now reading an article (uberVU/react-guide) on props vs. state and it says \n\n\n  Both props and state changes trigger a render update.\n\n\nLater in the article it says:\n\n\n  Props (short for properties) are a Component's configuration, its options if you may. They are received from above and immutable.\n\n\n\nSo props can change but they should be immutable?\nWhen should you use props and when should you use state? \nIf you have data that a React component needs, should it be passed through props or setup in the React component via getInitialState?\n\n", "article"=>{"topic_id"=>30, "url"=>"https://stackoverflow.com/questions/27991366/what-is-the-difference-between-state-and-props-in-react", "description"=>"I was watching a Pluralsight course on React and the instructor stated that props should not be changed. I'm now reading an article (uberVU/react-guide) on props vs. state and it says \n\n\n  Both props and state changes trigger a render update.\n\n\nLater in the article it says:\n\n\n  Props (short for properties) are a Component's configuration, its options if you may. They are received from above and immutable.\n\n\n\nSo props can change but they should be immutable?\nWhen should you use props and when should you use state? \nIf you have data that a React component needs, should it be passed through props or setup in the React component via getInitialState?\n\n", "title"=>"What is the difference between state and props in React?"}}
  [1m[35m (1.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mTopic Load (0.4ms)[0m  [1m[34mSELECT  "topics".* FROM "topics" WHERE "topics"."id" = $1 LIMIT $2[0m  [["id", 30], ["LIMIT", 1]]
  [1m[35mSQL (1.0ms)[0m  [1m[32mINSERT INTO "articles" ("topic_id", "url", "description", "created_at", "updated_at", "title") VALUES ($1, $2, $3, $4, $5, $6) RETURNING "id"[0m  [["topic_id", 30], ["url", "https://stackoverflow.com/questions/27991366/what-is-the-difference-between-state-and-props-in-react"], ["description", "I was watching a Pluralsight course on React and the instructor stated that props should not be changed. I'm now reading an article (uberVU/react-guide) on props vs. state and it says \n\n\n  Both props and state changes trigger a render update.\n\n\nLater in the article it says:\n\n\n  Props (short for properties) are a Component's configuration, its options if you may. They are received from above and immutable.\n\n\n\nSo props can change but they should be immutable?\nWhen should you use props and when should you use state? \nIf you have data that a React component needs, should it be passed through props or setup in the React component via getInitialState?\n\n"], ["created_at", "2018-02-21 01:08:50.996257"], ["updated_at", "2018-02-21 01:08:50.996257"], ["title", "What is the difference between state and props in React?"]]
  [1m[35m (0.5ms)[0m  [1m[35mCOMMIT[0m
[active_model_serializers] Rendered ActiveModel::Serializer::Null with Article (0.32ms)
Completed 200 OK in 11ms (Views: 0.8ms | ActiveRecord: 3.1ms)


Started GET "/api/v1/topics?title=react%20state" for 127.0.0.1 at 2018-02-20 20:08:58 -0500
Processing by Api::V1::TopicsController#index as */*
  Parameters: {"title"=>"react state"}
  [1m[36mTopic Load (0.4ms)[0m  [1m[34mSELECT "topics".* FROM "topics"[0m
No serializer found for resource: #<Topic id: 30, user_id: 15, title: "react state", created_at: "2018-02-21 01:08:50", updated_at: "2018-02-21 01:08:50">
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with Array (0.23ms)
Completed 200 OK in 3ms (Views: 1.0ms | ActiveRecord: 0.4ms)


Started GET "/api/v1/articles?url=https://reactjs.org/docs/state-and-lifecycle.html&topic_id=30" for 127.0.0.1 at 2018-02-20 20:08:58 -0500
Processing by Api::V1::ArticlesController#index as */*
  Parameters: {"url"=>"https://reactjs.org/docs/state-and-lifecycle.html", "topic_id"=>"30"}
  [1m[36mArticle Load (0.4ms)[0m  [1m[34mSELECT "articles".* FROM "articles"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModelSerializers::Adapter::Attributes (0.07ms)
Completed 200 OK in 3ms (Views: 0.5ms | ActiveRecord: 0.4ms)


Started POST "/api/v1/articles" for 127.0.0.1 at 2018-02-20 20:08:58 -0500
Processing by Api::V1::ArticlesController#create as JSON
  Parameters: {"topic_id"=>30, "title"=>"State and Lifecycle - React", "url"=>"https://reactjs.org/docs/state-and-lifecycle.html", "description"=>"State and Lifecycle. Consider the ticking clock example from one of the previous \nsections. So far we have only learned one way to update the UI. We call \nReactDOM.render() to change the rendered output: function tick() { const element \n= ( <div> <h1>Hello, world!</h1> <h2>It is {new Date().toLocaleTimeString()}.", "article"=>{"topic_id"=>30, "url"=>"https://reactjs.org/docs/state-and-lifecycle.html", "description"=>"State and Lifecycle. Consider the ticking clock example from one of the previous \nsections. So far we have only learned one way to update the UI. We call \nReactDOM.render() to change the rendered output: function tick() { const element \n= ( <div> <h1>Hello, world!</h1> <h2>It is {new Date().toLocaleTimeString()}.", "title"=>"State and Lifecycle - React"}}
  [1m[35m (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mTopic Load (0.4ms)[0m  [1m[34mSELECT  "topics".* FROM "topics" WHERE "topics"."id" = $1 LIMIT $2[0m  [["id", 30], ["LIMIT", 1]]
  [1m[35mSQL (0.5ms)[0m  [1m[32mINSERT INTO "articles" ("topic_id", "url", "description", "created_at", "updated_at", "title") VALUES ($1, $2, $3, $4, $5, $6) RETURNING "id"[0m  [["topic_id", 30], ["url", "https://reactjs.org/docs/state-and-lifecycle.html"], ["description", "State and Lifecycle. Consider the ticking clock example from one of the previous \nsections. So far we have only learned one way to update the UI. We call \nReactDOM.render() to change the rendered output: function tick() { const element \n= ( <div> <h1>Hello, world!</h1> <h2>It is {new Date().toLocaleTimeString()}."], ["created_at", "2018-02-21 01:08:58.258633"], ["updated_at", "2018-02-21 01:08:58.258633"], ["title", "State and Lifecycle - React"]]
  [1m[35m (1.0ms)[0m  [1m[35mCOMMIT[0m
[active_model_serializers] Rendered ActiveModel::Serializer::Null with Article (0.3ms)
Completed 200 OK in 7ms (Views: 0.8ms | ActiveRecord: 2.2ms)


Started GET "/api/v1/topics?title=big%20o" for 127.0.0.1 at 2018-02-20 20:09:22 -0500
Processing by Api::V1::TopicsController#index as */*
  Parameters: {"title"=>"big o"}
  [1m[36mTopic Load (0.3ms)[0m  [1m[34mSELECT "topics".* FROM "topics"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModelSerializers::Adapter::Attributes (0.07ms)
Completed 200 OK in 2ms (Views: 0.5ms | ActiveRecord: 0.3ms)


Started POST "/api/v1/topics" for 127.0.0.1 at 2018-02-20 20:09:22 -0500
Processing by Api::V1::TopicsController#create as JSON
  Parameters: {"user_id"=>15, "title"=>"big o", "topic"=>{"user_id"=>15, "title"=>"big o"}}
  [1m[35m (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 15], ["LIMIT", 1]]
  [1m[36mTopic Exists (0.5ms)[0m  [1m[34mSELECT  1 AS one FROM "topics" WHERE "topics"."title" = $1 LIMIT $2[0m  [["title", "big o"], ["LIMIT", 1]]
  [1m[35mSQL (1.7ms)[0m  [1m[32mINSERT INTO "topics" ("user_id", "title", "created_at", "updated_at") VALUES ($1, $2, $3, $4) RETURNING "id"[0m  [["user_id", 15], ["title", "big o"], ["created_at", "2018-02-21 01:09:22.085886"], ["updated_at", "2018-02-21 01:09:22.085886"]]
  [1m[35m (1.1ms)[0m  [1m[35mCOMMIT[0m
[active_model_serializers] Rendered ActiveModel::Serializer::Null with Topic (0.24ms)
Completed 200 OK in 9ms (Views: 0.7ms | ActiveRecord: 3.6ms)


Started POST "/api/v1/articles" for 127.0.0.1 at 2018-02-20 20:09:22 -0500
Processing by Api::V1::ArticlesController#create as JSON
  Parameters: {"topic_id"=>31, "title"=>"What does O(log n) mean exactly?", "url"=>"https://stackoverflow.com/questions/2307283/what-does-olog-n-mean-exactly", "description"=>"I am currently learning about Big O Notation running times and amortized times.  I understand the notion of O(n) linear time, meaning that the size of the input affects the growth of the algorithm proportionally...and the same goes for, for example, quadratic time O(n2) etc..even algorithms, such as permutation generators, with O(n!) times, that grow by factorials.\n\nFor example, the following function is O(n) because the algorithm grows in proportion to its input n:\n\nf(int n) {\n  int i;\n  for (i = 0; i < n; ++i)\n    printf(\"%d\", i);\n}\n\n\nSimilarly, if there was a nested loop, the time would be O(n2).\n\nBut what exactly is O(log n)?  For example, what does it mean to say that the height of a complete binary tree is O(log n)?\n\nI do know (maybe not in great detail) what Logarithm is, in the sense that:  log10 100 = 2, but I cannot understand how to identify a function with a logarithmic time.\n", "article"=>{"topic_id"=>31, "url"=>"https://stackoverflow.com/questions/2307283/what-does-olog-n-mean-exactly", "description"=>"I am currently learning about Big O Notation running times and amortized times.  I understand the notion of O(n) linear time, meaning that the size of the input affects the growth of the algorithm proportionally...and the same goes for, for example, quadratic time O(n2) etc..even algorithms, such as permutation generators, with O(n!) times, that grow by factorials.\n\nFor example, the following function is O(n) because the algorithm grows in proportion to its input n:\n\nf(int n) {\n  int i;\n  for (i = 0; i < n; ++i)\n    printf(\"%d\", i);\n}\n\n\nSimilarly, if there was a nested loop, the time would be O(n2).\n\nBut what exactly is O(log n)?  For example, what does it mean to say that the height of a complete binary tree is O(log n)?\n\nI do know (maybe not in great detail) what Logarithm is, in the sense that:  log10 100 = 2, but I cannot understand how to identify a function with a logarithmic time.\n", "title"=>"What does O(log n) mean exactly?"}}
  [1m[35m (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[36mTopic Load (0.3ms)[0m  [1m[34mSELECT  "topics".* FROM "topics" WHERE "topics"."id" = $1 LIMIT $2[0m  [["id", 31], ["LIMIT", 1]]
  [1m[35mSQL (0.5ms)[0m  [1m[32mINSERT INTO "articles" ("topic_id", "url", "description", "created_at", "updated_at", "title") VALUES ($1, $2, $3, $4, $5, $6) RETURNING "id"[0m  [["topic_id", 31], ["url", "https://stackoverflow.com/questions/2307283/what-does-olog-n-mean-exactly"], ["description", "I am currently learning about Big O Notation running times and amortized times.  I understand the notion of O(n) linear time, meaning that the size of the input affects the growth of the algorithm proportionally...and the same goes for, for example, quadratic time O(n2) etc..even algorithms, such as permutation generators, with O(n!) times, that grow by factorials.\n\nFor example, the following function is O(n) because the algorithm grows in proportion to its input n:\n\nf(int n) {\n  int i;\n  for (i = 0; i < n; ++i)\n    printf(\"%d\", i);\n}\n\n\nSimilarly, if there was a nested loop, the time would be O(n2).\n\nBut what exactly is O(log n)?  For example, what does it mean to say that the height of a complete binary tree is O(log n)?\n\nI do know (maybe not in great detail) what Logarithm is, in the sense that:  log10 100 = 2, but I cannot understand how to identify a function with a logarithmic time.\n"], ["created_at", "2018-02-21 01:09:22.098522"], ["updated_at", "2018-02-21 01:09:22.098522"], ["title", "What does O(log n) mean exactly?"]]
  [1m[35m (0.4ms)[0m  [1m[35mCOMMIT[0m
[active_model_serializers] Rendered ActiveModel::Serializer::Null with Article (0.47ms)
Completed 200 OK in 6ms (Views: 1.0ms | ActiveRecord: 1.3ms)


Started GET "/api/v1/topics?title=big%20o" for 127.0.0.1 at 2018-02-20 20:09:26 -0500
Processing by Api::V1::TopicsController#index as */*
  Parameters: {"title"=>"big o"}
  [1m[36mTopic Load (0.3ms)[0m  [1m[34mSELECT "topics".* FROM "topics"[0m
No serializer found for resource: #<Topic id: 31, user_id: 15, title: "big o", created_at: "2018-02-21 01:09:22", updated_at: "2018-02-21 01:09:22">
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with Array (0.18ms)
Completed 200 OK in 2ms (Views: 0.7ms | ActiveRecord: 0.3ms)


Started GET "/api/v1/articles?url=https://stackoverflow.com/questions/11514308/big-o-of-javascript-arrays&topic_id=31" for 127.0.0.1 at 2018-02-20 20:09:26 -0500
Processing by Api::V1::ArticlesController#index as */*
  Parameters: {"url"=>"https://stackoverflow.com/questions/11514308/big-o-of-javascript-arrays", "topic_id"=>"31"}
  [1m[36mArticle Load (0.5ms)[0m  [1m[34mSELECT "articles".* FROM "articles"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModelSerializers::Adapter::Attributes (0.06ms)
Completed 200 OK in 3ms (Views: 0.4ms | ActiveRecord: 0.5ms)


Started POST "/api/v1/articles" for 127.0.0.1 at 2018-02-20 20:09:26 -0500
Processing by Api::V1::ArticlesController#create as JSON
  Parameters: {"topic_id"=>31, "title"=>"Big O of JavaScript arrays", "url"=>"https://stackoverflow.com/questions/11514308/big-o-of-javascript-arrays", "description"=>"Arrays in JavaScript are very easy to modify by adding and removing items. It somewhat masks the fact that most languages array's are fixed-size, and require complex operations to resize. It seems that JavaScript makes it easy to write poorly performing array code. This leads to the question:\n\nWhat performance (in terms of big O time complexity) can I expect from JavaScript implementations in regards to array performance?\n\nI assume that all reasonable JavaScript implementations have at least the following big O's.\n\n\nAccess - O(1)\nAppending - O(n)\nPrepending - O(n)\nInsertion - O(n)\nDeletion - O(n)\nSwapping - O(1)\n\n\nJavaScript lets you pre-fill an array to a certain size, using new Array(length) syntax. (Bonus question: Is creating an array in this manner O(1) or O(n)) This is more like a conventional array, and if used as a pre-sized array, can allow O(1) appending. If circular buffer logic is added, you can achieve O(1) prepending. If a dynamically expanding array is used, O(log n) will be the average case for both of those.\n\nCan I expect better performance for some things than my assumptions here? I don't expect anything is outlined in any specifications, but in practice it could be that all major implementations use optimized arrays behind the scenes. Are there dynamically expanding arrays or some other performance boosting algorithms at work?\n\nP.S.\n\nThe reason I'm wondering this is because I'm researching some sorting algorithms, most of which seem to assume appending and deleting are O(1) operations when describing their overall big O.\n", "article"=>{"topic_id"=>31, "url"=>"https://stackoverflow.com/questions/11514308/big-o-of-javascript-arrays", "description"=>"Arrays in JavaScript are very easy to modify by adding and removing items. It somewhat masks the fact that most languages array's are fixed-size, and require complex operations to resize. It seems that JavaScript makes it easy to write poorly performing array code. This leads to the question:\n\nWhat performance (in terms of big O time complexity) can I expect from JavaScript implementations in regards to array performance?\n\nI assume that all reasonable JavaScript implementations have at least the following big O's.\n\n\nAccess - O(1)\nAppending - O(n)\nPrepending - O(n)\nInsertion - O(n)\nDeletion - O(n)\nSwapping - O(1)\n\n\nJavaScript lets you pre-fill an array to a certain size, using new Array(length) syntax. (Bonus question: Is creating an array in this manner O(1) or O(n)) This is more like a conventional array, and if used as a pre-sized array, can allow O(1) appending. If circular buffer logic is added, you can achieve O(1) prepending. If a dynamically expanding array is used, O(log n) will be the average case for both of those.\n\nCan I expect better performance for some things than my assumptions here? I don't expect anything is outlined in any specifications, but in practice it could be that all major implementations use optimized arrays behind the scenes. Are there dynamically expanding arrays or some other performance boosting algorithms at work?\n\nP.S.\n\nThe reason I'm wondering this is because I'm researching some sorting algorithms, most of which seem to assume appending and deleting are O(1) operations when describing their overall big O.\n", "title"=>"Big O of JavaScript arrays"}}
  [1m[35m (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[36mTopic Load (0.3ms)[0m  [1m[34mSELECT  "topics".* FROM "topics" WHERE "topics"."id" = $1 LIMIT $2[0m  [["id", 31], ["LIMIT", 1]]
  [1m[35mSQL (0.5ms)[0m  [1m[32mINSERT INTO "articles" ("topic_id", "url", "description", "created_at", "updated_at", "title") VALUES ($1, $2, $3, $4, $5, $6) RETURNING "id"[0m  [["topic_id", 31], ["url", "https://stackoverflow.com/questions/11514308/big-o-of-javascript-arrays"], ["description", "Arrays in JavaScript are very easy to modify by adding and removing items. It somewhat masks the fact that most languages array's are fixed-size, and require complex operations to resize. It seems that JavaScript makes it easy to write poorly performing array code. This leads to the question:\n\nWhat performance (in terms of big O time complexity) can I expect from JavaScript implementations in regards to array performance?\n\nI assume that all reasonable JavaScript implementations have at least the following big O's.\n\n\nAccess - O(1)\nAppending - O(n)\nPrepending - O(n)\nInsertion - O(n)\nDeletion - O(n)\nSwapping - O(1)\n\n\nJavaScript lets you pre-fill an array to a certain size, using new Array(length) syntax. (Bonus question: Is creating an array in this manner O(1) or O(n)) This is more like a conventional array, and if used as a pre-sized array, can allow O(1) appending. If circular buffer logic is added, you can achieve O(1) prepending. If a dynamically expanding array is used, O(log n) will be the average case for both of those.\n\nCan I expect better performance for some things than my assumptions here? I don't expect anything is outlined in any specifications, but in practice it could be that all major implementations use optimized arrays behind the scenes. Are there dynamically expanding arrays or some other performance boosting algorithms at work?\n\nP.S.\n\nThe reason I'm wondering this is because I'm researching some sorting algorithms, most of which seem to assume appending and deleting are O(1) operations when describing their overall big O.\n"], ["created_at", "2018-02-21 01:09:26.211711"], ["updated_at", "2018-02-21 01:09:26.211711"], ["title", "Big O of JavaScript arrays"]]
  [1m[35m (1.1ms)[0m  [1m[35mCOMMIT[0m
[active_model_serializers] Rendered ActiveModel::Serializer::Null with Article (0.36ms)
Completed 200 OK in 6ms (Views: 0.8ms | ActiveRecord: 2.0ms)


Started DELETE "/api/v1/articles/79" for 127.0.0.1 at 2018-02-20 20:09:27 -0500
Processing by Api::V1::ArticlesController#destroy as JSON
  Parameters: {"id"=>"79", "article"=>{}}
  [1m[36mArticle Load (0.3ms)[0m  [1m[34mSELECT  "articles".* FROM "articles" WHERE "articles"."id" = $1 LIMIT $2[0m  [["id", 79], ["LIMIT", 1]]
  [1m[35m (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[35mSQL (1.9ms)[0m  [1m[31mDELETE FROM "articles" WHERE "articles"."id" = $1[0m  [["id", 79]]
  [1m[35m (0.4ms)[0m  [1m[35mCOMMIT[0m
Completed 204 No Content in 5ms (ActiveRecord: 2.7ms)


Started DELETE "/api/v1/topics/31" for 127.0.0.1 at 2018-02-20 20:09:30 -0500
Processing by Api::V1::TopicsController#destroy as JSON
  Parameters: {"id"=>"31", "topic"=>{}}
  [1m[36mTopic Load (0.3ms)[0m  [1m[34mSELECT  "topics".* FROM "topics" WHERE "topics"."id" = $1 LIMIT $2[0m  [["id", 31], ["LIMIT", 1]]
  [1m[35m (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[36mArticle Load (1.3ms)[0m  [1m[34mSELECT "articles".* FROM "articles" WHERE "articles"."topic_id" = $1[0m  [["topic_id", 31]]
  [1m[35mSQL (0.4ms)[0m  [1m[31mDELETE FROM "articles" WHERE "articles"."id" = $1[0m  [["id", 80]]
  [1m[35mSQL (1.2ms)[0m  [1m[31mDELETE FROM "topics" WHERE "topics"."id" = $1[0m  [["id", 31]]
  [1m[35m (0.8ms)[0m  [1m[35mCOMMIT[0m
Completed 204 No Content in 10ms (ActiveRecord: 4.1ms)


Started GET "/api/v1/topics?title=big%20o" for 127.0.0.1 at 2018-02-20 20:09:44 -0500
Processing by Api::V1::TopicsController#index as */*
  Parameters: {"title"=>"big o"}
  [1m[36mTopic Load (0.3ms)[0m  [1m[34mSELECT "topics".* FROM "topics"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModelSerializers::Adapter::Attributes (0.05ms)
Completed 200 OK in 2ms (Views: 0.5ms | ActiveRecord: 0.3ms)


Started POST "/api/v1/topics" for 127.0.0.1 at 2018-02-20 20:09:44 -0500
Processing by Api::V1::TopicsController#create as JSON
  Parameters: {"user_id"=>15, "title"=>"big o", "topic"=>{"user_id"=>15, "title"=>"big o"}}
  [1m[35m (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 15], ["LIMIT", 1]]
  [1m[36mTopic Exists (0.4ms)[0m  [1m[34mSELECT  1 AS one FROM "topics" WHERE "topics"."title" = $1 LIMIT $2[0m  [["title", "big o"], ["LIMIT", 1]]
  [1m[35mSQL (0.5ms)[0m  [1m[32mINSERT INTO "topics" ("user_id", "title", "created_at", "updated_at") VALUES ($1, $2, $3, $4) RETURNING "id"[0m  [["user_id", 15], ["title", "big o"], ["created_at", "2018-02-21 01:09:44.686967"], ["updated_at", "2018-02-21 01:09:44.686967"]]
  [1m[35m (1.0ms)[0m  [1m[35mCOMMIT[0m
[active_model_serializers] Rendered ActiveModel::Serializer::Null with Topic (0.25ms)
Completed 200 OK in 6ms (Views: 0.8ms | ActiveRecord: 2.2ms)


Started POST "/api/v1/articles" for 127.0.0.1 at 2018-02-20 20:09:44 -0500
Processing by Api::V1::ArticlesController#create as JSON
  Parameters: {"topic_id"=>32, "title"=>"What is a plain English explanation of &quot;Big O&quot; notation?", "url"=>"https://stackoverflow.com/questions/487258/what-is-a-plain-english-explanation-of-big-o-notation", "description"=>"I'd prefer as little formal definition as possible and simple mathematics.\n", "article"=>{"topic_id"=>32, "url"=>"https://stackoverflow.com/questions/487258/what-is-a-plain-english-explanation-of-big-o-notation", "description"=>"I'd prefer as little formal definition as possible and simple mathematics.\n", "title"=>"What is a plain English explanation of &quot;Big O&quot; notation?"}}
  [1m[35m (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mTopic Load (0.3ms)[0m  [1m[34mSELECT  "topics".* FROM "topics" WHERE "topics"."id" = $1 LIMIT $2[0m  [["id", 32], ["LIMIT", 1]]
  [1m[35mSQL (0.8ms)[0m  [1m[32mINSERT INTO "articles" ("topic_id", "url", "description", "created_at", "updated_at", "title") VALUES ($1, $2, $3, $4, $5, $6) RETURNING "id"[0m  [["topic_id", 32], ["url", "https://stackoverflow.com/questions/487258/what-is-a-plain-english-explanation-of-big-o-notation"], ["description", "I'd prefer as little formal definition as possible and simple mathematics.\n"], ["created_at", "2018-02-21 01:09:44.701044"], ["updated_at", "2018-02-21 01:09:44.701044"], ["title", "What is a plain English explanation of &quot;Big O&quot; notation?"]]
  [1m[35m (0.6ms)[0m  [1m[35mCOMMIT[0m
[active_model_serializers] Rendered ActiveModel::Serializer::Null with Article (1.08ms)
Completed 200 OK in 13ms (Views: 3.5ms | ActiveRecord: 1.9ms)


Started GET "/api/v1/topics?title=big%20o" for 127.0.0.1 at 2018-02-20 20:09:49 -0500
Processing by Api::V1::TopicsController#index as */*
  Parameters: {"title"=>"big o"}
  [1m[36mTopic Load (0.3ms)[0m  [1m[34mSELECT "topics".* FROM "topics"[0m
No serializer found for resource: #<Topic id: 32, user_id: 15, title: "big o", created_at: "2018-02-21 01:09:44", updated_at: "2018-02-21 01:09:44">
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with Array (0.33ms)
Completed 200 OK in 3ms (Views: 1.0ms | ActiveRecord: 0.3ms)


Started GET "/api/v1/articles?url=https://en.wikipedia.org/wiki/Big_O_notation&topic_id=32" for 127.0.0.1 at 2018-02-20 20:09:49 -0500
Processing by Api::V1::ArticlesController#index as */*
  Parameters: {"url"=>"https://en.wikipedia.org/wiki/Big_O_notation", "topic_id"=>"32"}
  [1m[36mArticle Load (0.4ms)[0m  [1m[34mSELECT "articles".* FROM "articles"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModelSerializers::Adapter::Attributes (0.06ms)
Completed 200 OK in 3ms (Views: 0.4ms | ActiveRecord: 0.4ms)


Started POST "/api/v1/articles" for 127.0.0.1 at 2018-02-20 20:09:49 -0500
Processing by Api::V1::ArticlesController#create as JSON
  Parameters: {"topic_id"=>32, "title"=>"Big O notation", "url"=>"https://en.wikipedia.org/wiki/Big_O_notation", "description"=>"Big O notation is a mathematical notation that describes the limiting behavior of a function when the argument tends towards a particular value or infinity.", "article"=>{"topic_id"=>32, "url"=>"https://en.wikipedia.org/wiki/Big_O_notation", "description"=>"Big O notation is a mathematical notation that describes the limiting behavior of a function when the argument tends towards a particular value or infinity.", "title"=>"Big O notation"}}
  [1m[35m (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[36mTopic Load (0.9ms)[0m  [1m[34mSELECT  "topics".* FROM "topics" WHERE "topics"."id" = $1 LIMIT $2[0m  [["id", 32], ["LIMIT", 1]]
  [1m[35mSQL (0.5ms)[0m  [1m[32mINSERT INTO "articles" ("topic_id", "url", "description", "created_at", "updated_at", "title") VALUES ($1, $2, $3, $4, $5, $6) RETURNING "id"[0m  [["topic_id", 32], ["url", "https://en.wikipedia.org/wiki/Big_O_notation"], ["description", "Big O notation is a mathematical notation that describes the limiting behavior of a function when the argument tends towards a particular value or infinity."], ["created_at", "2018-02-21 01:09:49.052095"], ["updated_at", "2018-02-21 01:09:49.052095"], ["title", "Big O notation"]]
  [1m[35m (0.9ms)[0m  [1m[35mCOMMIT[0m
[active_model_serializers] Rendered ActiveModel::Serializer::Null with Article (0.31ms)
Completed 200 OK in 9ms (Views: 0.9ms | ActiveRecord: 2.5ms)


Started GET "/api/v1/topics?title=big%20o" for 127.0.0.1 at 2018-02-20 20:09:54 -0500
Processing by Api::V1::TopicsController#index as */*
  Parameters: {"title"=>"big o"}
  [1m[36mTopic Load (0.6ms)[0m  [1m[34mSELECT "topics".* FROM "topics"[0m
No serializer found for resource: #<Topic id: 32, user_id: 15, title: "big o", created_at: "2018-02-21 01:09:44", updated_at: "2018-02-21 01:09:44">
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with Array (0.24ms)
Completed 200 OK in 3ms (Views: 0.9ms | ActiveRecord: 0.6ms)


Started GET "/api/v1/articles?url=https://bigomusic.bandcamp.com/&topic_id=32" for 127.0.0.1 at 2018-02-20 20:09:54 -0500
Processing by Api::V1::ArticlesController#index as */*
  Parameters: {"url"=>"https://bigomusic.bandcamp.com/", "topic_id"=>"32"}
  [1m[36mArticle Load (0.4ms)[0m  [1m[34mSELECT "articles".* FROM "articles"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModelSerializers::Adapter::Attributes (0.07ms)
Completed 200 OK in 3ms (Views: 0.6ms | ActiveRecord: 0.4ms)


Started POST "/api/v1/articles" for 127.0.0.1 at 2018-02-20 20:09:54 -0500
Processing by Api::V1::ArticlesController#create as JSON
  Parameters: {"topic_id"=>32, "title"=>"Big O", "url"=>"https://bigomusic.bandcamp.com/", "description"=>"Big O DIY Till I DIE or until someone else does it for me, released 17 February \n2017 1. Lose Controle (feat MC Lars, Produced by DJ Solo) 2. All By Myself 3. \nThis Song (feat MC Lars) 4. That's What I've Been Told 5. Good Days Bad Days \nDo it yourself till I do it everyday or until someone else does it for me. This is my \nbest ...", "article"=>{"topic_id"=>32, "url"=>"https://bigomusic.bandcamp.com/", "description"=>"Big O DIY Till I DIE or until someone else does it for me, released 17 February \n2017 1. Lose Controle (feat MC Lars, Produced by DJ Solo) 2. All By Myself 3. \nThis Song (feat MC Lars) 4. That's What I've Been Told 5. Good Days Bad Days \nDo it yourself till I do it everyday or until someone else does it for me. This is my \nbest ...", "title"=>"Big O"}}
  [1m[35m (0.1ms)[0m  [1m[35mBEGIN[0m
  [1m[36mTopic Load (0.2ms)[0m  [1m[34mSELECT  "topics".* FROM "topics" WHERE "topics"."id" = $1 LIMIT $2[0m  [["id", 32], ["LIMIT", 1]]
  [1m[35mSQL (1.4ms)[0m  [1m[32mINSERT INTO "articles" ("topic_id", "url", "description", "created_at", "updated_at", "title") VALUES ($1, $2, $3, $4, $5, $6) RETURNING "id"[0m  [["topic_id", 32], ["url", "https://bigomusic.bandcamp.com/"], ["description", "Big O DIY Till I DIE or until someone else does it for me, released 17 February \n2017 1. Lose Controle (feat MC Lars, Produced by DJ Solo) 2. All By Myself 3. \nThis Song (feat MC Lars) 4. That's What I've Been Told 5. Good Days Bad Days \nDo it yourself till I do it everyday or until someone else does it for me. This is my \nbest ..."], ["created_at", "2018-02-21 01:09:54.909182"], ["updated_at", "2018-02-21 01:09:54.909182"], ["title", "Big O"]]
  [1m[35m (0.4ms)[0m  [1m[35mCOMMIT[0m
[active_model_serializers] Rendered ActiveModel::Serializer::Null with Article (0.28ms)
Completed 200 OK in 6ms (Views: 0.7ms | ActiveRecord: 2.1ms)


Started GET "/api/v1/users?username=ggore" for 127.0.0.1 at 2018-02-21 14:19:07 -0500
  [1m[35m (4.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Processing by Api::V1::UsersController#index as */*
  Parameters: {"username"=>"ggore"}
  [1m[36mUser Load (4.5ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
[active_model_serializers]   [1m[36mTopic Load (2.4ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 15]]
[active_model_serializers] No serializer found for resource: #<Topic id: 29, user_id: 15, title: "gems", created_at: "2018-02-21 01:08:26", updated_at: "2018-02-21 01:08:26">
[active_model_serializers]   [1m[36mArticle Load (5.5ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 15]]
[active_model_serializers] No serializer found for resource: #<Article id: 76, topic_id: 29, url: "https://stackoverflow.com/questions/17026441/how-t...", description: "Using the command-line gem tool, how can I install...", created_at: "2018-02-21 01:08:26", updated_at: "2018-02-21 01:08:26", title: "How to install a specific version of a ruby gem?">
[active_model_serializers] No serializer found for resource: #<Topic id: 29, user_id: 15, title: "gems", created_at: "2018-02-21 01:08:26", updated_at: "2018-02-21 01:08:26">
[active_model_serializers] No serializer found for resource: #<Article id: 76, topic_id: 29, url: "https://stackoverflow.com/questions/17026441/how-t...", description: "Using the command-line gem tool, how can I install...", created_at: "2018-02-21 01:08:26", updated_at: "2018-02-21 01:08:26", title: "How to install a specific version of a ruby gem?">
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModelSerializers::Adapter::Attributes (95.26ms)
Completed 200 OK in 149ms (Views: 99.9ms | ActiveRecord: 32.8ms)


Started GET "/api/v1/users?username=ggore" for 127.0.0.1 at 2018-02-21 14:19:08 -0500
Processing by Api::V1::UsersController#index as */*
  Parameters: {"username"=>"ggore"}
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
[active_model_serializers]   [1m[36mTopic Load (0.3ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 15]]
[active_model_serializers] No serializer found for resource: #<Topic id: 29, user_id: 15, title: "gems", created_at: "2018-02-21 01:08:26", updated_at: "2018-02-21 01:08:26">
[active_model_serializers]   [1m[36mArticle Load (0.6ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 15]]
[active_model_serializers] No serializer found for resource: #<Article id: 76, topic_id: 29, url: "https://stackoverflow.com/questions/17026441/how-t...", description: "Using the command-line gem tool, how can I install...", created_at: "2018-02-21 01:08:26", updated_at: "2018-02-21 01:08:26", title: "How to install a specific version of a ruby gem?">
[active_model_serializers] No serializer found for resource: #<Topic id: 29, user_id: 15, title: "gems", created_at: "2018-02-21 01:08:26", updated_at: "2018-02-21 01:08:26">
[active_model_serializers] No serializer found for resource: #<Article id: 76, topic_id: 29, url: "https://stackoverflow.com/questions/17026441/how-t...", description: "Using the command-line gem tool, how can I install...", created_at: "2018-02-21 01:08:26", updated_at: "2018-02-21 01:08:26", title: "How to install a specific version of a ruby gem?">
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModelSerializers::Adapter::Attributes (18.88ms)
Completed 200 OK in 21ms (Views: 18.6ms | ActiveRecord: 1.3ms)


Started GET "/api/v1/users?username=ggore" for 127.0.0.1 at 2018-02-21 14:22:50 -0500
Processing by Api::V1::UsersController#index as */*
  Parameters: {"username"=>"ggore"}
  [1m[36mUser Load (1.5ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
[active_model_serializers]   [1m[36mTopic Load (1.1ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 15]]
[active_model_serializers] No serializer found for resource: #<Topic id: 29, user_id: 15, title: "gems", created_at: "2018-02-21 01:08:26", updated_at: "2018-02-21 01:08:26">
[active_model_serializers]   [1m[36mArticle Load (2.1ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 15]]
[active_model_serializers] No serializer found for resource: #<Article id: 76, topic_id: 29, url: "https://stackoverflow.com/questions/17026441/how-t...", description: "Using the command-line gem tool, how can I install...", created_at: "2018-02-21 01:08:26", updated_at: "2018-02-21 01:08:26", title: "How to install a specific version of a ruby gem?">
[active_model_serializers] No serializer found for resource: #<Topic id: 29, user_id: 15, title: "gems", created_at: "2018-02-21 01:08:26", updated_at: "2018-02-21 01:08:26">
[active_model_serializers] No serializer found for resource: #<Article id: 76, topic_id: 29, url: "https://stackoverflow.com/questions/17026441/how-t...", description: "Using the command-line gem tool, how can I install...", created_at: "2018-02-21 01:08:26", updated_at: "2018-02-21 01:08:26", title: "How to install a specific version of a ruby gem?">
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModelSerializers::Adapter::Attributes (46.71ms)
Completed 200 OK in 67ms (Views: 45.4ms | ActiveRecord: 4.7ms)


Started GET "/api/v1/users?username=ggore" for 127.0.0.1 at 2018-02-21 14:22:50 -0500
Processing by Api::V1::UsersController#index as */*
  Parameters: {"username"=>"ggore"}
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users"[0m
[active_model_serializers]   [1m[36mTopic Load (1.4ms)[0m  [1m[34mSELECT "topics".* FROM "topics" WHERE "topics"."user_id" = $1[0m  [["user_id", 15]]
[active_model_serializers] No serializer found for resource: #<Topic id: 29, user_id: 15, title: "gems", created_at: "2018-02-21 01:08:26", updated_at: "2018-02-21 01:08:26">
[active_model_serializers]   [1m[36mArticle Load (0.9ms)[0m  [1m[34mSELECT "articles".* FROM "articles" INNER JOIN "topics" ON "articles"."topic_id" = "topics"."id" WHERE "topics"."user_id" = $1[0m  [["user_id", 15]]
[active_model_serializers] No serializer found for resource: #<Article id: 76, topic_id: 29, url: "https://stackoverflow.com/questions/17026441/how-t...", description: "Using the command-line gem tool, how can I install...", created_at: "2018-02-21 01:08:26", updated_at: "2018-02-21 01:08:26", title: "How to install a specific version of a ruby gem?">
[active_model_serializers] No serializer found for resource: #<Topic id: 29, user_id: 15, title: "gems", created_at: "2018-02-21 01:08:26", updated_at: "2018-02-21 01:08:26">
[active_model_serializers] No serializer found for resource: #<Article id: 76, topic_id: 29, url: "https://stackoverflow.com/questions/17026441/how-t...", description: "Using the command-line gem tool, how can I install...", created_at: "2018-02-21 01:08:26", updated_at: "2018-02-21 01:08:26", title: "How to install a specific version of a ruby gem?">
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModelSerializers::Adapter::Attributes (23.74ms)
Completed 200 OK in 27ms (Views: 22.1ms | ActiveRecord: 2.8ms)


Started GET "/api/v1/topics?title=big%20o" for 127.0.0.1 at 2018-02-21 14:23:06 -0500
Processing by Api::V1::TopicsController#index as */*
  Parameters: {"title"=>"big o"}
  [1m[36mTopic Load (0.5ms)[0m  [1m[34mSELECT "topics".* FROM "topics"[0m
No serializer found for resource: #<Topic id: 32, user_id: 15, title: "big o", created_at: "2018-02-21 01:09:44", updated_at: "2018-02-21 01:09:44">
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with Array (0.83ms)
Completed 200 OK in 18ms (Views: 14.0ms | ActiveRecord: 0.5ms)


Started GET "/api/v1/articles?url=https://stackoverflow.com/questions/3255/big-o-how-do-you-calculate-approximate-it&topic_id=32" for 127.0.0.1 at 2018-02-21 14:23:06 -0500
Processing by Api::V1::ArticlesController#index as */*
  Parameters: {"url"=>"https://stackoverflow.com/questions/3255/big-o-how-do-you-calculate-approximate-it", "topic_id"=>"32"}
  [1m[36mArticle Load (1.2ms)[0m  [1m[34mSELECT "articles".* FROM "articles"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModelSerializers::Adapter::Attributes (0.11ms)
Completed 200 OK in 7ms (Views: 0.7ms | ActiveRecord: 1.2ms)


Started POST "/api/v1/articles" for 127.0.0.1 at 2018-02-21 14:23:06 -0500
Processing by Api::V1::ArticlesController#create as JSON
  Parameters: {"topic_id"=>32, "title"=>"Big O, how do you calculate/approximate it?", "url"=>"https://stackoverflow.com/questions/3255/big-o-how-do-you-calculate-approximate-it", "description"=>"Most people with a degree in CS will certainly know what Big O stands for.\nIt helps us to measure how (in)efficient an algorithm really is and if you know in what category the problem you are trying to solve lays in you can figure out if it is still possible to squeeze out that little extra performance.1\n\nBut I'm curious, how do you calculate or approximate the complexity of your algorithms?\n\n1 but as they say, don't overdo it, premature optimization is the root of all evil, and optimization without a justified cause should deserve that name as well.\n", "article"=>{"topic_id"=>32, "url"=>"https://stackoverflow.com/questions/3255/big-o-how-do-you-calculate-approximate-it", "description"=>"Most people with a degree in CS will certainly know what Big O stands for.\nIt helps us to measure how (in)efficient an algorithm really is and if you know in what category the problem you are trying to solve lays in you can figure out if it is still possible to squeeze out that little extra performance.1\n\nBut I'm curious, how do you calculate or approximate the complexity of your algorithms?\n\n1 but as they say, don't overdo it, premature optimization is the root of all evil, and optimization without a justified cause should deserve that name as well.\n", "title"=>"Big O, how do you calculate/approximate it?"}}
  [1m[35m (1.6ms)[0m  [1m[35mBEGIN[0m
  [1m[36mTopic Load (1.0ms)[0m  [1m[34mSELECT  "topics".* FROM "topics" WHERE "topics"."id" = $1 LIMIT $2[0m  [["id", 32], ["LIMIT", 1]]
  [1m[35mSQL (19.1ms)[0m  [1m[32mINSERT INTO "articles" ("topic_id", "url", "description", "created_at", "updated_at", "title") VALUES ($1, $2, $3, $4, $5, $6) RETURNING "id"[0m  [["topic_id", 32], ["url", "https://stackoverflow.com/questions/3255/big-o-how-do-you-calculate-approximate-it"], ["description", "Most people with a degree in CS will certainly know what Big O stands for.\nIt helps us to measure how (in)efficient an algorithm really is and if you know in what category the problem you are trying to solve lays in you can figure out if it is still possible to squeeze out that little extra performance.1\n\nBut I'm curious, how do you calculate or approximate the complexity of your algorithms?\n\n1 but as they say, don't overdo it, premature optimization is the root of all evil, and optimization without a justified cause should deserve that name as well.\n"], ["created_at", "2018-02-21 19:23:06.605854"], ["updated_at", "2018-02-21 19:23:06.605854"], ["title", "Big O, how do you calculate/approximate it?"]]
  [1m[35m (1.9ms)[0m  [1m[35mCOMMIT[0m
[active_model_serializers] Rendered ActiveModel::Serializer::Null with Article (0.37ms)
Completed 200 OK in 42ms (Views: 4.4ms | ActiveRecord: 23.5ms)


Started GET "/api/v1/topics?title=ruby%20on%20rails" for 127.0.0.1 at 2018-02-21 14:23:20 -0500
Processing by Api::V1::TopicsController#index as */*
  Parameters: {"title"=>"ruby on rails"}
  [1m[36mTopic Load (0.6ms)[0m  [1m[34mSELECT "topics".* FROM "topics"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModelSerializers::Adapter::Attributes (0.1ms)
Completed 200 OK in 4ms (Views: 1.2ms | ActiveRecord: 0.6ms)


Started POST "/api/v1/topics" for 127.0.0.1 at 2018-02-21 14:23:20 -0500
Processing by Api::V1::TopicsController#create as JSON
  Parameters: {"user_id"=>15, "title"=>"ruby on rails", "topic"=>{"user_id"=>15, "title"=>"ruby on rails"}}
  [1m[35m (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mUser Load (1.1ms)[0m  [1m[34mSELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2[0m  [["id", 15], ["LIMIT", 1]]
  [1m[36mTopic Exists (5.5ms)[0m  [1m[34mSELECT  1 AS one FROM "topics" WHERE "topics"."title" = $1 LIMIT $2[0m  [["title", "ruby on rails"], ["LIMIT", 1]]
  [1m[35mSQL (2.0ms)[0m  [1m[32mINSERT INTO "topics" ("user_id", "title", "created_at", "updated_at") VALUES ($1, $2, $3, $4) RETURNING "id"[0m  [["user_id", 15], ["title", "ruby on rails"], ["created_at", "2018-02-21 19:23:20.300144"], ["updated_at", "2018-02-21 19:23:20.300144"]]
  [1m[35m (0.6ms)[0m  [1m[35mCOMMIT[0m
[active_model_serializers] Rendered ActiveModel::Serializer::Null with Topic (0.34ms)
Completed 200 OK in 32ms (Views: 1.3ms | ActiveRecord: 9.4ms)


Started POST "/api/v1/articles" for 127.0.0.1 at 2018-02-21 14:23:20 -0500
Processing by Api::V1::ArticlesController#create as JSON
  Parameters: {"topic_id"=>33, "title"=>"Ruby on Rails", "url"=>"https://en.wikipedia.org/wiki/Ruby_on_Rails", "description"=>"Ruby on Rails, or Rails, is a server-side web application framework written in Ruby under the MIT License.", "article"=>{"topic_id"=>33, "url"=>"https://en.wikipedia.org/wiki/Ruby_on_Rails", "description"=>"Ruby on Rails, or Rails, is a server-side web application framework written in Ruby under the MIT License.", "title"=>"Ruby on Rails"}}
  [1m[35m (0.3ms)[0m  [1m[35mBEGIN[0m
  [1m[36mTopic Load (1.2ms)[0m  [1m[34mSELECT  "topics".* FROM "topics" WHERE "topics"."id" = $1 LIMIT $2[0m  [["id", 33], ["LIMIT", 1]]
  [1m[35mSQL (1.3ms)[0m  [1m[32mINSERT INTO "articles" ("topic_id", "url", "description", "created_at", "updated_at", "title") VALUES ($1, $2, $3, $4, $5, $6) RETURNING "id"[0m  [["topic_id", 33], ["url", "https://en.wikipedia.org/wiki/Ruby_on_Rails"], ["description", "Ruby on Rails, or Rails, is a server-side web application framework written in Ruby under the MIT License."], ["created_at", "2018-02-21 19:23:20.334987"], ["updated_at", "2018-02-21 19:23:20.334987"], ["title", "Ruby on Rails"]]
  [1m[35m (1.6ms)[0m  [1m[35mCOMMIT[0m
[active_model_serializers] Rendered ActiveModel::Serializer::Null with Article (1.32ms)
Completed 200 OK in 25ms (Views: 5.1ms | ActiveRecord: 4.4ms)


Started GET "/api/v1/topics?title=ruby%20on%20rails" for 127.0.0.1 at 2018-02-21 14:23:24 -0500
Processing by Api::V1::TopicsController#index as */*
  Parameters: {"title"=>"ruby on rails"}
  [1m[36mTopic Load (0.6ms)[0m  [1m[34mSELECT "topics".* FROM "topics"[0m
No serializer found for resource: #<Topic id: 33, user_id: 15, title: "ruby on rails", created_at: "2018-02-21 19:23:20", updated_at: "2018-02-21 19:23:20">
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with Array (0.37ms)
Completed 200 OK in 4ms (Views: 1.4ms | ActiveRecord: 0.6ms)


Started GET "/api/v1/articles?url=https://stackoverflow.com/questions/885414/a-concise-explanation-of-nil-v-empty-v-blank-in-ruby-on-rails&topic_id=33" for 127.0.0.1 at 2018-02-21 14:23:24 -0500
Processing by Api::V1::ArticlesController#index as */*
  Parameters: {"url"=>"https://stackoverflow.com/questions/885414/a-concise-explanation-of-nil-v-empty-v-blank-in-ruby-on-rails", "topic_id"=>"33"}
  [1m[36mArticle Load (0.6ms)[0m  [1m[34mSELECT "articles".* FROM "articles"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModelSerializers::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.8ms | ActiveRecord: 0.6ms)


Started POST "/api/v1/articles" for 127.0.0.1 at 2018-02-21 14:23:24 -0500
Processing by Api::V1::ArticlesController#create as JSON
  Parameters: {"topic_id"=>33, "title"=>"A concise explanation of nil v. empty v. blank in Ruby on Rails", "url"=>"https://stackoverflow.com/questions/885414/a-concise-explanation-of-nil-v-empty-v-blank-in-ruby-on-rails", "description"=>"I find myself repeatedly looking for a clear definition of the differences of nil?, blank?, and empty? in Ruby on Rails.  Here's the closest I've come:\n\n\nblank? objects are false, empty, or a whitespace string. For example, \"\", \" \", nil, [], and {} are blank.\nnil? objects are instances of NilClass.\nempty? objects are class-specific, and the definition varies from class to class. A string is empty if it has no characters, and an array is empty if it contains no items.\n\n\nIs there anything missing, or a tighter comparison that can be made?\n", "article"=>{"topic_id"=>33, "url"=>"https://stackoverflow.com/questions/885414/a-concise-explanation-of-nil-v-empty-v-blank-in-ruby-on-rails", "description"=>"I find myself repeatedly looking for a clear definition of the differences of nil?, blank?, and empty? in Ruby on Rails.  Here's the closest I've come:\n\n\nblank? objects are false, empty, or a whitespace string. For example, \"\", \" \", nil, [], and {} are blank.\nnil? objects are instances of NilClass.\nempty? objects are class-specific, and the definition varies from class to class. A string is empty if it has no characters, and an array is empty if it contains no items.\n\n\nIs there anything missing, or a tighter comparison that can be made?\n", "title"=>"A concise explanation of nil v. empty v. blank in Ruby on Rails"}}
  [1m[35m (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mTopic Load (0.5ms)[0m  [1m[34mSELECT  "topics".* FROM "topics" WHERE "topics"."id" = $1 LIMIT $2[0m  [["id", 33], ["LIMIT", 1]]
  [1m[35mSQL (2.0ms)[0m  [1m[32mINSERT INTO "articles" ("topic_id", "url", "description", "created_at", "updated_at", "title") VALUES ($1, $2, $3, $4, $5, $6) RETURNING "id"[0m  [["topic_id", 33], ["url", "https://stackoverflow.com/questions/885414/a-concise-explanation-of-nil-v-empty-v-blank-in-ruby-on-rails"], ["description", "I find myself repeatedly looking for a clear definition of the differences of nil?, blank?, and empty? in Ruby on Rails.  Here's the closest I've come:\n\n\nblank? objects are false, empty, or a whitespace string. For example, \"\", \" \", nil, [], and {} are blank.\nnil? objects are instances of NilClass.\nempty? objects are class-specific, and the definition varies from class to class. A string is empty if it has no characters, and an array is empty if it contains no items.\n\n\nIs there anything missing, or a tighter comparison that can be made?\n"], ["created_at", "2018-02-21 19:23:24.201120"], ["updated_at", "2018-02-21 19:23:24.201120"], ["title", "A concise explanation of nil v. empty v. blank in Ruby on Rails"]]
  [1m[35m (1.2ms)[0m  [1m[35mCOMMIT[0m
[active_model_serializers] Rendered ActiveModel::Serializer::Null with Article (0.58ms)
Completed 200 OK in 13ms (Views: 1.6ms | ActiveRecord: 3.9ms)


Started GET "/api/v1/topics?title=ruby%20on%20rails" for 127.0.0.1 at 2018-02-21 14:23:29 -0500
Processing by Api::V1::TopicsController#index as */*
  Parameters: {"title"=>"ruby on rails"}
  [1m[36mTopic Load (0.5ms)[0m  [1m[34mSELECT "topics".* FROM "topics"[0m
No serializer found for resource: #<Topic id: 33, user_id: 15, title: "ruby on rails", created_at: "2018-02-21 19:23:20", updated_at: "2018-02-21 19:23:20">
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with Array (0.36ms)
Completed 200 OK in 3ms (Views: 1.2ms | ActiveRecord: 0.5ms)


Started GET "/api/v1/articles?url=http://guides.rubyonrails.org/&topic_id=33" for 127.0.0.1 at 2018-02-21 14:23:29 -0500
Processing by Api::V1::ArticlesController#index as */*
  Parameters: {"url"=>"http://guides.rubyonrails.org/", "topic_id"=>"33"}
  [1m[36mArticle Load (0.7ms)[0m  [1m[34mSELECT "articles".* FROM "articles"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModelSerializers::Adapter::Attributes (0.15ms)
Completed 200 OK in 13ms (Views: 1.3ms | ActiveRecord: 0.7ms)


Started POST "/api/v1/articles" for 127.0.0.1 at 2018-02-21 14:23:29 -0500
Processing by Api::V1::ArticlesController#create as JSON
  Parameters: {"topic_id"=>33, "title"=>"Ruby on Rails Guides", "url"=>"http://guides.rubyonrails.org/", "description"=>"This guide documents the Ruby core extensions defined in Active Support. Rails \nInternationalization API. This guide covers how to add internationalization to your \napplications. Your application will be able to translate content to different \nlanguages, change pluralization rules, use correct date formats for each country, \nand so ...", "article"=>{"topic_id"=>33, "url"=>"http://guides.rubyonrails.org/", "description"=>"This guide documents the Ruby core extensions defined in Active Support. Rails \nInternationalization API. This guide covers how to add internationalization to your \napplications. Your application will be able to translate content to different \nlanguages, change pluralization rules, use correct date formats for each country, \nand so ...", "title"=>"Ruby on Rails Guides"}}
  [1m[35m (0.4ms)[0m  [1m[35mBEGIN[0m
  [1m[36mTopic Load (0.5ms)[0m  [1m[34mSELECT  "topics".* FROM "topics" WHERE "topics"."id" = $1 LIMIT $2[0m  [["id", 33], ["LIMIT", 1]]
  [1m[35mSQL (1.8ms)[0m  [1m[32mINSERT INTO "articles" ("topic_id", "url", "description", "created_at", "updated_at", "title") VALUES ($1, $2, $3, $4, $5, $6) RETURNING "id"[0m  [["topic_id", 33], ["url", "http://guides.rubyonrails.org/"], ["description", "This guide documents the Ruby core extensions defined in Active Support. Rails \nInternationalization API. This guide covers how to add internationalization to your \napplications. Your application will be able to translate content to different \nlanguages, change pluralization rules, use correct date formats for each country, \nand so ..."], ["created_at", "2018-02-21 19:23:29.337182"], ["updated_at", "2018-02-21 19:23:29.337182"], ["title", "Ruby on Rails Guides"]]
  [1m[35m (0.7ms)[0m  [1m[35mCOMMIT[0m
[active_model_serializers] Rendered ActiveModel::Serializer::Null with Article (0.52ms)
Completed 200 OK in 14ms (Views: 2.1ms | ActiveRecord: 3.2ms)


Started DELETE "/api/v1/topics/29" for 127.0.0.1 at 2018-02-21 14:23:36 -0500
Processing by Api::V1::TopicsController#destroy as JSON
  Parameters: {"id"=>"29", "topic"=>{}}
  [1m[36mTopic Load (0.8ms)[0m  [1m[34mSELECT  "topics".* FROM "topics" WHERE "topics"."id" = $1 LIMIT $2[0m  [["id", 29], ["LIMIT", 1]]
  [1m[35m (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[36mArticle Load (0.5ms)[0m  [1m[34mSELECT "articles".* FROM "articles" WHERE "articles"."topic_id" = $1[0m  [["topic_id", 29]]
  [1m[35mSQL (2.0ms)[0m  [1m[31mDELETE FROM "articles" WHERE "articles"."id" = $1[0m  [["id", 76]]
  [1m[35mSQL (2.0ms)[0m  [1m[31mDELETE FROM "topics" WHERE "topics"."id" = $1[0m  [["id", 29]]
  [1m[35m (1.8ms)[0m  [1m[35mCOMMIT[0m
Completed 204 No Content in 19ms (ActiveRecord: 7.3ms)


Started DELETE "/api/v1/articles/82" for 127.0.0.1 at 2018-02-21 14:23:41 -0500
Processing by Api::V1::ArticlesController#destroy as JSON
  Parameters: {"id"=>"82", "article"=>{}}
  [1m[36mArticle Load (0.7ms)[0m  [1m[34mSELECT  "articles".* FROM "articles" WHERE "articles"."id" = $1 LIMIT $2[0m  [["id", 82], ["LIMIT", 1]]
  [1m[35m (0.2ms)[0m  [1m[35mBEGIN[0m
  [1m[35mSQL (1.8ms)[0m  [1m[31mDELETE FROM "articles" WHERE "articles"."id" = $1[0m  [["id", 82]]
  [1m[35m (1.5ms)[0m  [1m[35mCOMMIT[0m
Completed 204 No Content in 11ms (ActiveRecord: 4.2ms)


